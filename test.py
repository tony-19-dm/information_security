import os
import random
import struct
from lab1 import fast_pow as fast_exponentiation, ferm_test as ferm, extended_gcd as Evkl


# ---------- –®–∞–≥–∏ –®–∞–º–∏—Ä–∞ ----------
def Shamir(p, m, Ca, Da, Cb, Db):
    x1 = fast_exponentiation(m, Ca, p)
    x2 = fast_exponentiation(x1, Cb, p)
    x3 = fast_exponentiation(x2, Da, p)
    x4 = fast_exponentiation(x3, Db, p)
    return x4


# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def shamir_full_cycle():
    input_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä .png): ").strip()
    if not os.path.exists(input_file):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # --- –®–∞–≥ 1: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ---
    print("\nüîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    p, Ca, Cb, Da, Db, encrypted_blocks, original_size = shamir_encrypt_file(input_file)
    
    enc_file = "enc_" + input_file
    save_encrypted_binary(enc_file, p, Ca, Cb, Da, Db, encrypted_blocks, original_size)
    print(f"‚úÖ –§–∞–π–ª –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω ‚Üí {enc_file}")
    
    # --- –®–∞–≥ 2: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ---
    print("\nüîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞...")
    p, Ca, Cb, Da, Db, encrypted_blocks, original_size = load_encrypted_binary(enc_file)
    decrypted_data = shamir_decrypt_file(encrypted_blocks, p, Db, original_size)
    
    dec_file = "dec_" + input_file
    with open(dec_file, 'wb') as f:
        f.write(decrypted_data)
    print(f"‚úÖ –§–∞–π–ª —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω ‚Üí {dec_file}")
    
    # --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ ---
    with open(input_file, 'rb') as f:
        original_data = f.read()
    
    if original_data == decrypted_data:
        print("\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞: –∏—Å—Ö–æ–¥–Ω—ã–π –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
    else:
        print("\n‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!")
    
    print("\n--- –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ---")


# ---------- –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ----------
def shamir_encrypt_file(input_file, p=None, Ca=None, Cb=None):
    if p is None and Ca is None and Cb is None:
        while True:
            p = random.getrandbits(32)
            if ferm(p):
                break
        while True:
            Ca = random.randint(2, p-2)
            if Evkl(Ca, p-1)[0] == 1:
                break
        while True:
            Cb = random.randint(2, p-2)
            if Evkl(Cb, p-1)[0] == 1:
                break
        print(f"p = {p}\nCa = {Ca}\nCb = {Cb}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if not ferm(p):
        raise ValueError("p –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º")
    
    if Evkl(Ca, p-1)[0] != 1 or Evkl(Cb, p-1)[0] != 1:
        raise ValueError("Ca –∏ Cb –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç—ã —Å p-1")
    
    # –í—ã—á–∏—Å–ª—è–µ–º Da –∏ Db
    _, Da, _ = Evkl(Ca, p-1)
    Da %= (p-1)
    _, Db, _ = Evkl(Cb, p-1)
    Db %= (p-1)
    print(f"Da = {Da}, Db = {Db}")
    
    with open(input_file, 'rb') as f:
        file_data = f.read()
    
    encrypted_blocks = []
    for i in range(0, len(file_data), 3):
        block = file_data[i:i+3]
        if len(block) < 3:
            block += b'\x00' * (3 - len(block))
        m = int.from_bytes(block, byteorder='big')
        if m >= p:
            raise ValueError(f"–ë–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è p={p}")
        
        X1 = fast_exponentiation(m, Ca, p)
        X2 = fast_exponentiation(X1, Cb, p)
        X3 = fast_exponentiation(X2, Da, p)
        encrypted_blocks.append((X1, X2, X3))
    
    return p, Ca, Cb, Da, Db, encrypted_blocks, len(file_data)


# ---------- –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ----------
def shamir_decrypt_file(encrypted_blocks, p, Db, original_size):
    decrypted_data = b''
    for X1, X2, X3 in encrypted_blocks:
        X4 = fast_exponentiation(X3, Db, p)
        block_data = X4.to_bytes(3, byteorder='big')
        decrypted_data += block_data
    return decrypted_data[:original_size]


# ---------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ----------
def save_encrypted_binary(filename, p, Ca, Cb, Da, Db, encrypted_blocks, original_size):
    with open(filename, 'wb') as f:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ)
        f.write(struct.pack('<6Q', p, Ca, Cb, Da, Db, original_size))
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤
        f.write(struct.pack('<I', len(encrypted_blocks)))
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –∫–∞–∫ —Ç—Ä–∏ —á–∏—Å–ª–∞
        for X1, X2, X3 in encrypted_blocks:
            f.write(struct.pack('<3Q', X1, X2, X3))


# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ----------
def load_encrypted_binary(filename):
    with open(filename, 'rb') as f:
        p, Ca, Cb, Da, Db, original_size = struct.unpack('<6Q', f.read(48))
        block_count = struct.unpack('<I', f.read(4))[0]
        encrypted_blocks = []
        for _ in range(block_count):
            X1, X2, X3 = struct.unpack('<3Q', f.read(24))
            encrypted_blocks.append((X1, X2, X3))
    return p, Ca, Cb, Da, Db, encrypted_blocks, original_size


# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
if __name__ == "__main__":
    shamir_full_cycle()
